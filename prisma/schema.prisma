// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdSubiscuits  Subiscuit[] @relation("CreatedBy")
  username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]

  Recipe       Recipe[]
  Comment      Comment[]
  CommentVote  CommentVote[]
  Vote         Vote[]
  Subscription Subscription[]
}

model Subiscuit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipes   Recipe[]

  creatorId  String?
  Creator    User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscriber Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subiscuit   Subiscuit @relation(fields: [subiscuitId], references: [id])
  subiscuitId String

  @@id([userId, subiscuitId])
}

model Recipe {
  id          String    @id @default(cuid())
  title       String
  directions  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subiscuit   Subiscuit @relation(fields: [subiscuitId], references: [id])
  subiscuitId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes     Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  recipe     Recipe     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}


enum VoteType {
  UP
  DOWN
}

model Vote {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
  type     VoteType

  @@id([userId, recipeId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}
